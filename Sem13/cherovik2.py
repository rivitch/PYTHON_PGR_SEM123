# # 13_1 –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤–≤–µ–¥—ë—Ç —Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ. üìå–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

# def number_input():
#     while True:
#         try:
#             user_input = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ")
#             number = float(user_input)
#             if number.is_integer():
#                 return int(number)
#             else:
#                 return number
#         except ValueError:
#             print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.")

# number = number_input()
# print("–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ:", number)

# # --------------------------------------------------------------
# # 13_2 –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–æ–≥ get –¥–ª—è —Å–ª–æ–≤–∞—Ä—è. –ü–æ–º–∏–º–æ —Å–∞–º–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª—é—á—É —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

# def get_from_dict(dictionary, key, default='–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'):
#     try:
#         return dictionary[key]
#     except KeyError:
#         return default

# my_dict = {'a': 1, 'b': 2, 'c': 3}
# value = get_from_dict(my_dict, 'b')
# print(value)
# value = get_from_dict(my_dict, 'd')
# print(value)

# ----------------------------
# # 13_3 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å –±–∞–∑–æ–≤—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–ª–∞—Å—Å—ã–∏—Å–∫–ª—é—á–µ–Ω–∏—è: ‚óã –æ—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è, ‚óã –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.

class BaseException(Exception):
    def handle_exception(self):
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")

# class LvlErr(BaseException):
#     def ex(self):
#         print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É—Ä–æ–≤–Ω—è")
class LvlErr(BaseException):
    def __init__(self, message, level):
        super().__init__(message)
        self.level = level

    def handle_exception(self):
        super().handle_exception() # –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ handle_exception() —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        print("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É—Ä–æ–≤–Ω—è")
class AccessErr(BaseException):
    def ex(self):
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞")

# try:
#     raise AccessErr("–û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è!")
# except BaseException as e:
#     print(type(e).__name__ + ": " + str(e))

try:
    raise LvlErr("–û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è!")
except BaseException as e:
    e.ex()

#+++++++++++
# class LvlErr(BaseException):
#     def __init__(self, message, level):
#         super().__init__(message)
#         self.level = level

# def handle_exception(self):
#     super().handle_exception() # –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ handle_exception() —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
#     print("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É—Ä–æ–≤–Ω—è")

error = LvlErr('–û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è!') # , 3
print(error.message)
print(error.level)
error.handle_exception()