# Разработайте программное обеспечение для ведения журнала событий. Вам необходим класс, который будет представлять строки журнала и включать в себя информацию об авторе и времени создания каждой записи. Условия задачи:
# 1. Создайте класс MyStr, который наследуется от встроенного класса str и добавлять дополнительную информацию о создателе строки и времени ее создания. Этот класс будет представлять строки с информацией о событиях.
# 2. Класс MyStr должен иметь следующие атрибуты и методы:
# value (str): Строковое значение с описанием события.
# author (str): Имя автора, создавшего запись.
# time: Время создания записи в формате '%Y-%m-%d %H:%M'.
# 3. Реализуйте метод __new__(cls, value, author), который создает новый объект класса MyStr с заданным value и author. Метод также автоматически фиксирует время создания записи.
# 4. Реализуйте метод __str__(self), который возвращает строковое представление объекта класса MyStr с информацией о событии, авторе и времени создания.
# 5. Реализуйте метод __repr__(self), который возвращает строковое представление объекта класса MyStr для отладки. метод repr возвращает строку, которая может быть использована для создания точно такого же объекта MyStr с теми же значениями value и author. Это удобно при отладке, так как вы можете использовать repr() для просмотра информации о объекте.

# Описание кода Создается класс MyStr, который наследуется от стандартного класса str.

# В методе __new__ создается новый объект класса MyStr. Этот метод принимает два аргумента: value(значение строки) и author (имя автора). В методе создается объект с помощью super().__new__(cls, value), который представляет собой вызов конструктора класса str. Затем у объекта устанавливаются атрибуты author и time с текущим временем в формате timestamp. Наконец, созданный объект возвращается.

# Метод __str__ переопределяется для возвращения строкового представления объекта класса с добавленной информацией об авторе и времени создания. Время создания форматируется из timestamp в удобочитаемый вид с помощью модуля datetime.

# Метод __repr__ также переопределяется для возвращения строкового представления объекта класса, которое можно использовать для отладки.

# Пример использования.
# На входе:

# event = MyStr("Завершилось тестирование", "John")
# print(event)

# На выходе:

# Завершилось тестирование (Автор: John, Время создания: [ в формате '%Y-%m-%d %H:%M'])

# На входе:

# my_string = MyStr("Пример текста", "Иван")
# print(my_string)

# На выходе:

# Пример текста (Автор: Иван, Время создания: 2023-10-10 15:56)

# На входе:

# my_string = MyStr("Мама мыла раму", "Маршак")
# print(repr(my_string))

# На выходе:

# MyStr('Мама мыла раму', 'Маршак')

#   РАБОТАЕТ  --------------------------------------------------------------  
# from datetime import datetime

# class MyStr(str):
#     def __new__(cls, value, author):
#         obj = str.__new__(cls, value)
#         obj.value = value
#         obj.author = author
#         obj.time = datetime.now().strftime('%Y-%m-%d %H:%M')
#         return obj

# event = MyStr("Новое событие", "Иванов")
# print(event) # выводит "Новое событие"
# print(event.author) # выводит "Иванов"
# print(event.time) # выводит текущее время в формате "%Y-%m-%d %H:%M"
# ------------------------------------

from datetime import datetime

class MyStr(str):
    def __new__(cls, value, author):
        obj = super().__new__(cls, value)
        obj.value = value
        obj.author = author
        obj.time = datetime.now().strftime('%Y-%m-%d %H:%M')
        return obj

    def __str__(self):
        return f"{self.value} (Автор: {self.author}, Время создания: {self.time})"

    def __repr__(self):
        return f"MyStr({self.value!r}, {self.author!r})"
    
event = MyStr("Завершилось тестирование", "John")
print(f'1. {event}')
my_string = MyStr("Пример текста", "Иван")
print(f'2. {my_string}')
my_string = MyStr("Мама мыла раму", "Маршак")
print(f'3. {repr(my_string)}')